---
title: "Getting Help in R"
format: html
---

## Looking for Help

Whether it is a pesky error message or a function you can't seem to get to do
what you want, if you code, chances are you have already run into a few problems
today. When programming, it is not a matter of if you get stuck, or even when
you get stuck, but how much time will you spend stuck. Thankfully R has a wide
variety of tools to help you get unstuck, from built-in documentation, to 
mailing lists, to help groups like the Davis R Users Group. 

If you have ever asked for coding help, you may have gotten the response "Have
you checked the documentation?", which is the programming equivalent of asking
if you have read the manual. This is all well and good if you are proficient
with computer speak, but for most beginners that is not the case. It doesn't 
help that R documentation sometimes seems to be written from the perspective of
helping a computer programmer who just doesn't know R syntax, instead of helping
a new coder who is completely confused.

If you spent enough time puzzling over the R documentation, you could figure it
out eventually. However, to avoid the wailing and gnashing of teeth that may
require, this tutorial will explain what should be your first stop any time you
run into a problem in R: the R help file. The good news is that they are all
structured the same way, so once you understand one of them, understanding the
rest will be much easier.

## Opening R Documentation

You can access R help files in several ways. If you know the name of the 
function or package you are looking for information about, you can use the `?`
operator with the name of the function to open the R help file. This will only 
open documentation for functions and packages you currently have **loaded** 
into R. This is also equivalent to using the `help()` function

```{r}

#these lines of code are equivalent
?summary

help('summary')

```

If you are using RStudio this will bring up documentation for that function in
help window. If you use the GUI, it will open a separate help window. If you are
running R in bash or zsh, R will open the help file in your default text editor.

If you are unsure of the function name, you can use the `??` operator to search
all of your R documentation for a term or set of terms. For multiple search
terms, enclose them in tick marks. The `??` operator is equivalent to the
function `help.search()`, but for help.search you enclose your search term in
quotes. The help.search function also gives you more control over what you are
searching.

```{r}

??`linear model` 

#look for linear model only in the title of the help file
help.search('linear model', fields='title')

```


This will search documentation for all packages you have **installed**. It will
then provide a list links to documentation pages you can browse and use to find
the function that works best for your use case. Functions are labeled using the 
schema [PACKAGE NAME]::[FUNCTION NAME] so you can tell which package to load to 
access function you are interested in.

If you want to search documentation for packages that you haven't installed yet,
you have a couple of options. If you are only looking for packages that are
available through [CRAN][cran] or [bioconductor][bioC], you can use the
`RSiteSearch()` function, or [rdocumentation.org][rdoc] if you prefer a web
interface. CRAN itself contains a lot of documentation for each package on the
package's page (ex. [dplyr][dply]), but the information isn't searchable from
the website and you have to know what package you want information on. If you
also want to be able to search packages hosted on R-forge and Github in addition
to CRAN and bioconductor, you can use [rdrr.io][rdrr].

### Documentation Duplication

Sometimes you will have multiple functions that share the same name from 
different packages. If you use the `?` operator to open the help file for one
of these functions, a page will with links to different documentation pages
based on the package you are using. Be sure to click on the link that
corresponds to the function you have questions about.

![](img/multiple_help_docs.png)
## Definitions

R documentation uses a couple of terms that are sometimes glossed over
at introductory levels. However, without them, many R help files are nigh 
impossible to read.

### Objects

Objects are all the things you can interact with in R. Whenever you create a
variable, you create an object. All of the objects you create will appear in the
Environment tab in RStudio. If you aren't using RStudio you can also get a list
of your objects using `ls()`. 

```{r}

x = 5

ls()

```


There are many more objects that R defines internally (ex. `mtcars`).
  
### Classes
A class is the blueprint for the structure of an object. It defines how you can
interact with the object and what types of information it can contain. To
determine the class of an object, you can use the function `class()`. Common
examples of classes include integers, characters, data.frames, and lists. For
more information on classes, see the [Data Types and Classes][type] section of
DataLab's R Basics reader.
  
### Functions  
A function is a reusable set of instructions that performs a certain task. For
example, the `sqrt` function takes the square root of a given number or numbers.
The `length` function tells you the number of elements in a vector or list. For
more information on functions, see DataLab's [Calling Functions][cfun] and
[Functions][funs] sections of the R Basics reader.

#### Arguments
An argument is an input to a function. Not all functions require arguments, but
most do. 

### Methods
A method is a function that is defined for a particular class of object. For
example, the function `merge` allows you to combine two data.frames that have a
shared column. R assumes that the first two arguments you provide it are
data.frames, and it may complain if they are not. 

Some functions may have methods defined for multiple classes of objects. For
example, you can take the mean of a numeric vector or you can take the mean of a
series of Dates.

```{r}
mean(1:20)

(next_ten_weeks <- seq(Sys.Date(), length.out=10, by="1 week"))
mean(next_ten_weeks)

```

You can use the `methods` function to see what classes of objects have methods
for a given function.

```{r}

methods(mean)

```

This system of objects, classes, and methods is called Object-Oriented
Programming (OOP). Object oriented programming is not unique to R, but R does it
a little differently. If you want a deeper understanding of methods, the 
[S3 section][s3] of the Intermediate R reader describes the most widely used
system of OOP in R. Additionally, [Advanced R][oop] by Hadley Wickham provides a
more complete description of the various OOP systems available in R as well as
their trade-offs.


[dply]: https://cran.r-project.org/web/packages/dplyr/index.html
[cran]: https://cran.r-project.org/
[bioC]: https://www.bioconductor.org/packages/release/BiocViews.html#___Software
[rdoc]: https://www.rdocumentation.org/
[rdrr]: https://rdrr.io/
[type]: https://ucdavisdatalab.github.io/workshop_r_basics/data-structures.html#data-types-classes
[cfun]: https://ucdavisdatalab.github.io/workshop_r_basics/getting-started.html#calling-functions
[funs]: https://ucdavisdatalab.github.io/workshop_r_basics/automating-tasks.html#functions
[oop]:https://adv-r.hadley.nz/oo.html
[s3]: https://ucdavisdatalab.github.io/workshop_intermediate_r/language-fundamentals.html#s3