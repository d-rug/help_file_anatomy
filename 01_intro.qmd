---
title: "Introduction"
format: html
---

## Opening R documentation

You can access R help files in several ways. If you know the name of the 
function or package you are looking for information about, you can use the `?`
operator with the name of the function to open the R help file. This will only 
open documentation for functions and packages you currently have **loaded** 
into R.

```{r}

?summary

```

If you are using RStudio this will bring up documentation for that function in
help window. If you use the GUI, it will open a separate help window. If you are
running R in bash or zsh, R will open the help file in your default text editor.

If you are unsure of the function name, you can use the `??` operator to search
all of your R documentation for a term or set of terms. For multiple search 
terms, enclose them in tick marks.

```{r}

??`linear model`

```


This will search documentation for all packages you have **installed**. It will
then provide a list links to documentation pages you can browse and use to find
the function that works best for your use case. Functions are labeled using the 
schema [PACKAGE NAME]::[FUNCTION NAME] so you can tell which package to load to 
access function you are interested in.

If you want to search documentation for packages that you haven't installed yet,
you have a couple of options. If you are only looking for packages that are
available through [CRAN][cran] or [bioconductor][bioC], you can use
[rdocumentation.org][rdoc]. CRAN itself contains a lot of documentation for each
package on the package's page (ex. [dplyr][dply]), but the information isn't 
searchable from the website and you have to know what package you want 
information on. If you also want to be able to search packages hosted on R-forge
and Github in addition to CRAN and bioconductor, you can use [rdrr.io][rdrr]. 

### Documentation Duplication

Sometimes you will have multiple functions that share the same name from 
different packages. If you use the `?` operator to open the help file for one
of these functions, a page will with links to different documentation pages
based on the package you are using. Be sure to click on the link that
corresponds to the function you have questions about.

## Sections of a R Help File

Each R help file has a standard set of sections with 

The sections of an R help file in order are: 

  * Title
  * Description
  * Usage
  * Arguments
  * Details
  * Value
  * Note
  * References
  * Author(s)
  * See Also
  * Examples
  
Not every help file will contain all of these sections but most, if not all,
will have a Title, Description, Usage, Arguments, Value and Examples sections.

### Title

This is the section at the top of the help file and tells you the name of the 
documentation page you are looking at as well as the package the documentation
file is from (enclosed in {}). It also displays a very brief summary of what the
function does in large lettering. While the title is not something I use
regularly, I do occasionally need to figure out what package a particular
function lives in and the title is a great place to do that.

### Description

The Description section gives a more detailed description of what the function
or package does. It is not especially helpful for troubleshooting can be used to
get a sense of whether or not a function would suit your needs for a particular
task.

### Usage

The Usage section is the first regularly useful section, and one of the sections
I commonly look at in troubleshooting. It is also probably the most difficult 
to interpret. In general, it gives you information about (suprise) how to use the
function. Every usage section will have at least one example function call with
the named arguments listed out. Arguments with an `=` after them have a default
value and therefore do not necessarily need to be provided when using the
function, assuming you don't mind the default values. If there is no `=` after
the argument, it is a required argument and you will need to provide it each 
time you call the function. 

If there is more than one example function call in the usage section, that
generally means that there is more than one version of the function R can use.
Which version of the function R uses depends on the object class of the first 
argument passed to the function. We call functions that are specific to a given
class of object methods.

When there is more than one method listed in a given documentation file,
the file will tell you which class of object that particular method applies to
using a comment just above the call with language like "method for class X" or
"method for signature X". This tells you that the arguments listed inside that
call are the arguments you need to run that method if the object in your first 
argument is of class X. 

You may see `...` as one of the arguments in the Usage section. This "argument"
allows you to pass the function arguments not explicitly listed in the
function's documentation, and is typically done for two reasons. First, the 
function's author does not want to restrict the number of arguments you can
provide to the function. This is the case for functions like `sum()` and 
`data.frame()`

```{r}

sum(1:10, 99, 21:91)


data.frame(x=1:12, y=month.name, z=month.abb)

```

Second, the author may want to allow 



### Arguments

The Arguments section lists out the name each argument to the function, what
class of object it needs to be, and a description of what the argument does. 
If there are multiple functions listed in the Usage section

### Value

The Value section tells you what a function will return after it completes. If
you save the output of the function to a variable, this is the value the 
variable will have. The Value section will generally specify the class of the
object as well the information the object contains. Some functions do not return
a value. If this is the case, it may specify that in the Value section or the
value section may be missing. Just because something displays in your console
after running a function does not mean R returned anything (see [str][str_rd]).


### Details


### Note

### References

### Author(s)

### See Also

### Examples

The Examples section is by far the most useful, especially for beginners. It 
contains example code that can be run on any computer without loading any
additional packages or data. You can copy and paste it into your console and it
should just work. It is a great place to start if you have absolutely no 
experience with a function or package, or if you have tried everything
and nothing seems to work. 

The Examples section can also be a good place to get code to tinker with when 
trying to understand how a function works. For example, if you don't understand 
the description of the `digits` argument in the `summary()` documentation, you 
can use the code in 

```{r}

#copied directly from the Examples section
summary(attenu, digits = 4)

```

We can then modify the digits argument to see what effect this has on the 
function's output.

```{r}

#copied directly from the Examples section
summary(attenu, digits = 1)

```



[str_rd]: https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/str 
[dply]: https://cran.r-project.org/web/packages/dplyr/index.html
[cran]: https://cran.r-project.org/
[bioC]: https://www.bioconductor.org/packages/release/BiocViews.html#___Software
[rdoc]: https://www.rdocumentation.org/
[rdrr]: https://rdrr.io/
