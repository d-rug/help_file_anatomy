[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Anatomy of an R Help File",
    "section": "",
    "text": "Overview"
  },
  {
    "objectID": "01_intro.html#quarto",
    "href": "01_intro.html#quarto",
    "title": "Introduction",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "01_intro.html#running-code",
    "href": "01_intro.html#running-code",
    "title": "Introduction",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "02_example.html#quarto",
    "href": "02_example.html#quarto",
    "title": "Example",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "02_example.html#running-code",
    "href": "02_example.html#running-code",
    "title": "Example",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "01_intro.html#opening-r-documentation",
    "href": "01_intro.html#opening-r-documentation",
    "title": "Getting Help in R",
    "section": "Opening R documentation",
    "text": "Opening R documentation\nYou can access R help files in several ways. If you know the name of the function or package you are looking for information about, you can use the ? operator with the name of the function to open the R help file. This will only open documentation for functions and packages you currently have loaded into R. This is also equivalent to using the help() function\n\n#these lines of code are equivalent\n?summary\n\nhelp('summary')\n\nIf you are using RStudio this will bring up documentation for that function in help window. If you use the GUI, it will open a separate help window. If you are running R in bash or zsh, R will open the help file in your default text editor.\nIf you are unsure of the function name, you can use the ?? operator to search all of your R documentation for a term or set of terms. For multiple search terms, enclose them in tick marks. The ?? operator is equivalent to the function help.search(), but for help.search you enclose your search term in quotes. The help.search function also gives you more control over what you are searching.\n\n??`linear model` \n\n#look for linear model only in the title of the help file\nhelp.search('linear model', fields='title')\n\nThis will search documentation for all packages you have installed. It will then provide a list links to documentation pages you can browse and use to find the function that works best for your use case. Functions are labeled using the schema [PACKAGE NAME]::[FUNCTION NAME] so you can tell which package to load to access function you are interested in.\nIf you want to search documentation for packages that you haven’t installed yet, you have a couple of options. If you are only looking for packages that are available through CRAN or bioconductor, you can use the RSiteSearch() function, or rdocumentation.org if you prefer a web interface. CRAN itself contains a lot of documentation for each package on the package’s page (ex. dplyr), but the information isn’t searchable from the website and you have to know what package you want information on. If you also want to be able to search packages hosted on R-forge and Github in addition to CRAN and bioconductor, you can use rdrr.io.\n\nDocumentation Duplication\nSometimes you will have multiple functions that share the same name from different packages. If you use the ? operator to open the help file for one of these functions, a page will with links to different documentation pages based on the package you are using. Be sure to click on the link that corresponds to the function you have questions about."
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Anatomy of an R Help File",
    "section": "Description",
    "text": "Description\nThe R programming language has a vast and sprawling documentation library, and a lot of it is in a standardized format: the R help file. Unfortunately, R help files can be difficult to read at the best of times, and almost impossible to understand for those new to coding. This workshop will explain each section of the R help file, how to read them, and when they are the most useful. It will also introduce you a number of ways to search R documentation, both from R and on the internet."
  },
  {
    "objectID": "index.html#learning-goals",
    "href": "index.html#learning-goals",
    "title": "Anatomy of an R Help File",
    "section": "Learning Goals",
    "text": "Learning Goals\n\nKnow where to look for R documentation depending on what type of question you need answered\nUnderstand what information each section of a R help file contains"
  },
  {
    "objectID": "01_intro.html#sections-of-a-r-help-file",
    "href": "01_intro.html#sections-of-a-r-help-file",
    "title": "Getting Help in R",
    "section": "Sections of a R Help File",
    "text": "Sections of a R Help File\nEach R help file has a standard set of sections with\nThe sections of an R help file in order are:\n\nTitle\nDescription\nUsage\nArguments\nDetails\nValue\nNote\nReferences\nAuthor(s)\nSee Also\nExamples\n\nNot every help file will contain all of these sections but most, if not all, will have a Title, Description, Usage, Arguments, Value and Examples sections.\n\nTitle\nThis is the section at the top of the help file and tells you the name of the documentation page you are looking at as well as the package the documentation file is from (enclosed in {}). It also displays a very brief summary of what the function does in large lettering. While the title is not something I use regularly, I do occasionally need to figure out what package a particular function lives in and the title is a great place to do that.\n\n\nDescription\nThe Description section gives a more detailed description of what the function or package does. It is not generally helpful for troubleshooting. However, it is useful when trying to determine whether or not a function would suit your needs for a particular task.\n\n\nUsage\nThe Usage section is the first regularly useful section, and one of the sections I commonly look at when troubleshooting. It is also probably the most difficult to interpret. In general, it gives you information about how to use the function.\nEvery Usage section will have at least one example function call with the named arguments listed out. Arguments with an = after them have a default value and therefore do not necessarily need to be provided when using the function, assuming you don’t mind the default values. If there is no = after the argument, it is a required argument and you will need to provide it each time you call the function. The Usage section does not describe what each argument does. For that, you need to go to the Arguments section, which we will cover next. In general, the Usage and Arguments sections are closely links and I often find myself jumping back and forth between them when trying to understand what a function is doing.\nSometimes developers document multiple functions in a single help file. This is the case for read.table and read.csv, which share a documentation page. Even though two functions share a documentation page, that does not mean they share all the same arguments or default values. For example, the default value for the header argument is FALSE for read.table but TRUE for read.csv.\nIf there is more than one example function call of the same function in the Usage section, that generally means that there is more than one version of the function R can use. Which version of the function R uses depends on the object class of the first argument passed to the function. Methods refer to functions that are specific to a given class of object.\nWhen there is more than one method listed in a given documentation file, the file will tell you which class of object that particular method applies to using a comment just above the function call with language like “method for class X” or “method for signature X”. This tells you that the arguments listed inside that call are the arguments you need to run that method if your first argument has a class of X, as well as the default values.\nFor example, if we summarize survey data from the General Social Survey as a data.frame, R displays a maximum of 7 different values for categorical variables.\n\nlibrary(forcats)\n\nsummary(gss_cat)\n\n      year               marital           age                    race      \n Min.   :2000   No answer    :   17   Min.   :18.00   Other         : 1959  \n 1st Qu.:2002   Never married: 5416   1st Qu.:33.00   Black         : 3129  \n Median :2006   Separated    :  743   Median :46.00   White         :16395  \n Mean   :2007   Divorced     : 3383   Mean   :47.18   Not applicable:    0  \n 3rd Qu.:2010   Widowed      : 1807   3rd Qu.:59.00                         \n Max.   :2014   Married      :10117   Max.   :89.00                         \n                                      NA's   :76                            \n           rincome                   partyid            relig      \n $25000 or more:7363   Independent       :4119   Protestant:10846  \n Not applicable:7043   Not str democrat  :3690   Catholic  : 5124  \n $20000 - 24999:1283   Strong democrat   :3490   None      : 3523  \n $10000 - 14999:1168   Not str republican:3032   Christian :  689  \n $15000 - 19999:1048   Ind,near dem      :2499   Jewish    :  388  \n Refused       : 975   Strong republican :2314   Other     :  224  \n (Other)       :2603   (Other)           :2339   (Other)   :  689  \n              denom          tvhours      \n Not applicable  :10072   Min.   : 0.000  \n Other           : 2534   1st Qu.: 1.000  \n No denomination : 1683   Median : 2.000  \n Southern baptist: 1536   Mean   : 2.981  \n Baptist-dk which: 1457   3rd Qu.: 4.000  \n United methodist: 1067   Max.   :24.000  \n (Other)         : 3134   NA's   :10146   \n\n\nHowever, if we summarize one column of the data set, the summary function displays many more categories.\n\nsummary(gss_cat$relig)\n\n              No answer              Don't know Inter-nondenominational \n                     93                      15                     109 \n        Native american               Christian      Orthodox-christian \n                     23                     689                      95 \n           Moslem/islam           Other eastern                Hinduism \n                    104                      32                      71 \n               Buddhism                   Other                    None \n                    147                     224                    3523 \n                 Jewish                Catholic              Protestant \n                    388                    5124                   10846 \n         Not applicable \n                      0 \n\n\nGoing back to the documentation for summary(), we can see that for a data.frame the default value for maxsum is 7, while for a factor, the default value for maxsum is 100. Now, this is one difference between these to versions of the summary function, but to determine if this is the reason the outputs are different, we will need to refer to the Arguments section.\n\n\nArguments\nThe Arguments section lists out the name each argument to the function, what class of object it needs to be, and a description of what the argument does. It is probably the section I use most commonly use when troubleshooting. If there are multiple functions listed in the Usage section, it is possible not every function will use every argument. You will need to refer to the Usage section to determine if a given argument applies to the function you are using. To figure out what the maxsum argument actually does, we refer to the arguments section of the summary() help file.\nYou may see ... as one of the arguments in the Arguments and Usage sections. This “argument” allows you to pass arguments to the function that are not explicitly listed in the function’s documentation. This is typically done for two reasons.\nFirst, the function’s author many not want to restrict the number of arguments you can provide to the function. This is the case for functions like sum() and data.frame(). It would be pretty silly for the R developers to limit the number of columns you could create a data.frame with.\n\nsum(1:10, 99, 21:91)\n\n[1] 4130\n\ndata.frame(x=1:12, y=month.name, z=month.abb)\n\n    x         y   z\n1   1   January Jan\n2   2  February Feb\n3   3     March Mar\n4   4     April Apr\n5   5       May May\n6   6      June Jun\n7   7      July Jul\n8   8    August Aug\n9   9 September Sep\n10 10   October Oct\n11 11  November Nov\n12 12  December Dec\n\n\nSecond, the author of a given function may want to allow other packages to expand the functionality of that function. However, the original author won’t necessarily know what arguments will be useful for future R developers. So instead, they can include ... as an argument, and then other packages can define additional arguments that will be useful to them.\nThe plot function is one example of this. Many different packages define new classes that benefit from visualization. Instead of creating an entirely new function for just that class, the package’s creator can make a version of the plot() that will display objects of their class. The sf package uses this functionality. The sf package defines the sf class, which stores geographical information, like the counties of North Carolina. This is the type of data we use to make maps.\n\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\n#read in North Carolina data\nnc = st_read(system.file(\"shape/nc.shp\", package=\"sf\"), quiet = TRUE)\n\n#class of data created using sf package\nclass(nc)\n\n[1] \"sf\"         \"data.frame\"\n\nhead(nc)\n\nSimple feature collection with 6 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.07282 xmax: -75.77316 ymax: 36.58965\nGeodetic CRS:  NAD27\n   AREA PERIMETER CNTY_ CNTY_ID        NAME  FIPS FIPSNO CRESS_ID BIR74 SID74\n1 0.114     1.442  1825    1825        Ashe 37009  37009        5  1091     1\n2 0.061     1.231  1827    1827   Alleghany 37005  37005        3   487     0\n3 0.143     1.630  1828    1828       Surry 37171  37171       86  3188     5\n4 0.070     2.968  1831    1831   Currituck 37053  37053       27   508     1\n5 0.153     2.206  1832    1832 Northampton 37131  37131       66  1421     9\n6 0.097     1.670  1833    1833    Hertford 37091  37091       46  1452     7\n  NWBIR74 BIR79 SID79 NWBIR79                       geometry\n1      10  1364     0      19 MULTIPOLYGON (((-81.47276 3...\n2      10   542     3      12 MULTIPOLYGON (((-81.23989 3...\n3     208  3616     6     260 MULTIPOLYGON (((-80.45634 3...\n4     123   830     2     145 MULTIPOLYGON (((-76.00897 3...\n5    1066  1606     3    1197 MULTIPOLYGON (((-77.21767 3...\n6     954  1838     5    1237 MULTIPOLYGON (((-76.74506 3...\n\n\nIf we open up the R help file for plot after loading sf using ?plot, we have the option to select documentation for the plot function in the sf package by clicking on the link labeled “plot sf object”. In the sf::plot help page there are many more arguments listed in the Usage and Arguments sections. In particular, we can specify the position of the key (legend), plot the data on a log scale, and add a title.\n\nplot_title = 'Live Births in North Carolina from 1974-1978'\n\nplot(nc['BIR74'], key.pos=1, logz=TRUE, main=plot_title)\n\n\n\n\n\n\nDetails\nThe this section generally contains information that is important but may not clearly fit in any of the other sections. It is often where I go looking for help when I run into a problem that I can’t easily solve. Details covers the “behavior” of a function, or how a function accomplishes its task. This is especially important for functions that “behave” differently when you change the value of certain arguments. The help file for the covariance and correlation functions (cov and cor) is one example of this. The Details section describes how the functions work for each of the five options for the use argument. This includes telling you that one of them (“pairwise.complete.obs”) only works if you use method=\"pearson\". If the function in question implements a mathematical formula, the Details section may also include the formula, like in the case of ?dist.\n\n\nValue\nThe Value section tells you what a function will return after it completes. If you save the output of the function to a variable, this is the information that will be stored in the variable. The Value section will generally specify the class of the object as well the information the object contains. Some functions do not return a value. If this is the case, the Value section may specify that the function doesn’t return anything or the Value section may be missing. Just because something displays in your console after running a function does not mean R returned anything (see str).\n\n\nNote\nThe Note section is a second Details section for less critical pieces of information. In the help file for the data.frame function, it tells us that if we need code to be compatible with versions of R earlier than R 2.4.0, the class of our row.names argument needs to be a character vector. While this is undoubtedly useful for a very small subset of users, most of us don’t need to worry about that.\n\n\nReferences\nIf the function implements a formula, statistical method, algorithm, procedure, or data structure developed elsewhere, the References section will include the citation for the original source. The References section for the data.frame function cites a textbook on the S programming language, R’s precursor.\n\n\nAuthor(s)\n\n\nSee Also\nIf the function whose documentation you are reviewing doesn’t do exactly what you want, this is a good section to puruse. See Also contains links to the documentation files for functions that are similar to the function to the function you are investigating. This could include functions that implement a modified formula (like weighted means), or methods that are implemented for a different class like the summary method for a linear regression model (lm) object.\n\n\nExamples\nThe Examples section is by far the most useful section for beginners. It contains example code that can be run on any computer without loading any additional packages or data. You can copy and paste it into your console and it should just work. It is a great place to start if you have absolutely no experience with a function or package, or if you have tried everything and nothing seems to work.\nThe Examples section can also be a good place to get code to tinker with when trying to understand how a function works. For example, if you don’t understand the description of the digits argument in the summary() documentation, you can use the code in\n\n#copied directly from the Examples section\nsummary(attenu, digits = 4)\n\n     event            mag           station         dist       \n Min.   : 1.00   Min.   :5.000   117    :  5   Min.   :  0.50  \n 1st Qu.: 9.00   1st Qu.:5.300   1028   :  4   1st Qu.: 11.32  \n Median :18.00   Median :6.100   113    :  4   Median : 23.40  \n Mean   :14.74   Mean   :6.084   112    :  3   Mean   : 45.60  \n 3rd Qu.:20.00   3rd Qu.:6.600   135    :  3   3rd Qu.: 47.55  \n Max.   :23.00   Max.   :7.700   (Other):147   Max.   :370.00  \n                                 NA's   : 16                   \n     accel        \n Min.   :0.00300  \n 1st Qu.:0.04425  \n Median :0.11300  \n Mean   :0.15422  \n 3rd Qu.:0.21925  \n Max.   :0.81000  \n                  \n\n\nWe can then modify the digits argument to see what effect this has on the function’s output.\n\n#copied directly from the Examples section\nsummary(attenu, digits = 1)\n\n     event         mag       station         dist           accel      \n Min.   : 1   Min.   :5   117    :  5   Min.   :  0.5   Min.   :0.003  \n 1st Qu.: 9   1st Qu.:5   1028   :  4   1st Qu.: 11.3   1st Qu.:0.044  \n Median :18   Median :6   113    :  4   Median : 23.4   Median :0.113  \n Mean   :15   Mean   :6   112    :  3   Mean   : 45.6   Mean   :0.154  \n 3rd Qu.:20   3rd Qu.:7   135    :  3   3rd Qu.: 47.5   3rd Qu.:0.219  \n Max.   :23   Max.   :8   (Other):147   Max.   :370.0   Max.   :0.810  \n                          NA's   : 16                                  \n\n\nIt is rare that the code in the Examples section will do exactly what you want right off the bat. That does not mean the code is not useful. The key is to use this code as a starting point, code that you know runs, and then work from there."
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Anatomy of an R Help File",
    "section": "Setup",
    "text": "Setup\n\nif (!require('sf')) install.packages('sf')\nif (!require('forcats')) install.packages('forcats')"
  }
]